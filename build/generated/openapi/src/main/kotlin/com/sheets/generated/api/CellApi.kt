/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.sheets.generated.api

import com.sheets.generated.model.CellBatchResponse
import com.sheets.generated.model.CellDataRequest
import com.sheets.generated.model.CellErrorResponse
import com.sheets.generated.model.CellRequest
import com.sheets.generated.model.CellResponse
import com.sheets.generated.model.ErrorResponse
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:/v1}")
interface CellApi {


    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/sheet/{sheetId}/cell/{row}/{column}"],
            produces = ["application/json"]
    )
    fun deleteCell( @PathVariable("sheetId") sheetId: kotlin.Long, @PathVariable("row") row: kotlin.Int, @PathVariable("column") column: kotlin.Int, @RequestHeader(value = "X-User-ID", required = true) xUserID: kotlin.Long): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/sheet/{sheetId}/cell/{row}/{column}"],
            produces = ["application/json"]
    )
    fun getCell( @PathVariable("sheetId") sheetId: kotlin.Long, @PathVariable("row") row: kotlin.Int, @PathVariable("column") column: kotlin.Int, @RequestHeader(value = "X-User-ID", required = true) xUserID: kotlin.Long): ResponseEntity<CellResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/sheet/{sheetId}/cell"],
            produces = ["application/json"]
    )
    fun getCellsBySheetId( @PathVariable("sheetId") sheetId: kotlin.Long, @RequestHeader(value = "X-User-ID", required = true) xUserID: kotlin.Long): ResponseEntity<CellBatchResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/sheet/{sheetId}/cell"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun updateCell( @PathVariable("sheetId") sheetId: kotlin.Long, @RequestHeader(value = "X-User-ID", required = true) xUserID: kotlin.Long, @Valid @RequestBody cellRequest: CellRequest): ResponseEntity<CellResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/sheet/{sheetId}/cell/{cellId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun updateCellById( @PathVariable("sheetId") sheetId: kotlin.Long, @PathVariable("cellId") cellId: kotlin.String, @RequestHeader(value = "X-User-ID", required = true) xUserID: kotlin.Long, @Valid @RequestBody cellDataRequest: CellDataRequest): ResponseEntity<CellResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
