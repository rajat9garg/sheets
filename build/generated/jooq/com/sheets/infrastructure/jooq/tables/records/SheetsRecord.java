/*
 * This file is generated by jOOQ.
 */
package com.sheets.infrastructure.jooq.tables.records;


import com.sheets.infrastructure.jooq.tables.Sheets;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SheetsRecord extends UpdatableRecordImpl<SheetsRecord> implements Record8<Long, String, String, Integer, Integer, Long, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.sheets.id</code>.
     */
    public SheetsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.sheets.name</code>.
     */
    public SheetsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.sheets.description</code>.
     */
    public SheetsRecord setDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.sheets.max_length</code>.
     */
    public SheetsRecord setMaxLength(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.max_length</code>.
     */
    public Integer getMaxLength() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.sheets.max_breadth</code>.
     */
    public SheetsRecord setMaxBreadth(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.max_breadth</code>.
     */
    public Integer getMaxBreadth() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.sheets.user_id</code>. User ID of the sheet owner
     * (no foreign key constraint for testing purposes)
     */
    public SheetsRecord setUserId(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.user_id</code>. User ID of the sheet owner
     * (no foreign key constraint for testing purposes)
     */
    public Long getUserId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.sheets.created_at</code>.
     */
    public SheetsRecord setCreatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.sheets.updated_at</code>.
     */
    public SheetsRecord setUpdatedAt(OffsetDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.sheets.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, Integer, Integer, Long, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, Integer, Integer, Long, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Sheets.SHEETS.ID;
    }

    @Override
    public Field<String> field2() {
        return Sheets.SHEETS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Sheets.SHEETS.DESCRIPTION;
    }

    @Override
    public Field<Integer> field4() {
        return Sheets.SHEETS.MAX_LENGTH;
    }

    @Override
    public Field<Integer> field5() {
        return Sheets.SHEETS.MAX_BREADTH;
    }

    @Override
    public Field<Long> field6() {
        return Sheets.SHEETS.USER_ID;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return Sheets.SHEETS.CREATED_AT;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return Sheets.SHEETS.UPDATED_AT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Integer component4() {
        return getMaxLength();
    }

    @Override
    public Integer component5() {
        return getMaxBreadth();
    }

    @Override
    public Long component6() {
        return getUserId();
    }

    @Override
    public OffsetDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime component8() {
        return getUpdatedAt();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Integer value4() {
        return getMaxLength();
    }

    @Override
    public Integer value5() {
        return getMaxBreadth();
    }

    @Override
    public Long value6() {
        return getUserId();
    }

    @Override
    public OffsetDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime value8() {
        return getUpdatedAt();
    }

    @Override
    public SheetsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SheetsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SheetsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public SheetsRecord value4(Integer value) {
        setMaxLength(value);
        return this;
    }

    @Override
    public SheetsRecord value5(Integer value) {
        setMaxBreadth(value);
        return this;
    }

    @Override
    public SheetsRecord value6(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public SheetsRecord value7(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SheetsRecord value8(OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SheetsRecord values(Long value1, String value2, String value3, Integer value4, Integer value5, Long value6, OffsetDateTime value7, OffsetDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SheetsRecord
     */
    public SheetsRecord() {
        super(Sheets.SHEETS);
    }

    /**
     * Create a detached, initialised SheetsRecord
     */
    public SheetsRecord(Long id, String name, String description, Integer maxLength, Integer maxBreadth, Long userId, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        super(Sheets.SHEETS);

        setId(id);
        setName(name);
        setDescription(description);
        setMaxLength(maxLength);
        setMaxBreadth(maxBreadth);
        setUserId(userId);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SheetsRecord
     */
    public SheetsRecord(com.sheets.infrastructure.jooq.tables.pojos.Sheets value) {
        super(Sheets.SHEETS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setDescription(value.getDescription());
            setMaxLength(value.getMaxLength());
            setMaxBreadth(value.getMaxBreadth());
            setUserId(value.getUserId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
