/*
 * This file is generated by jOOQ.
 */
package com.sheets.infrastructure.jooq.tables;


import com.sheets.infrastructure.jooq.Indexes;
import com.sheets.infrastructure.jooq.Keys;
import com.sheets.infrastructure.jooq.Public;
import com.sheets.infrastructure.jooq.enums.AccessType;
import com.sheets.infrastructure.jooq.tables.Sheets.SheetsPath;
import com.sheets.infrastructure.jooq.tables.records.AccessMappingsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccessMappings extends TableImpl<AccessMappingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.access_mappings</code>
     */
    public static final AccessMappings ACCESS_MAPPINGS = new AccessMappings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessMappingsRecord> getRecordType() {
        return AccessMappingsRecord.class;
    }

    /**
     * The column <code>public.access_mappings.id</code>.
     */
    public final TableField<AccessMappingsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.access_mappings.sheet_id</code>.
     */
    public final TableField<AccessMappingsRecord, Long> SHEET_ID = createField(DSL.name("sheet_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.access_mappings.user_id</code>.
     */
    public final TableField<AccessMappingsRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.access_mappings.access_type</code>.
     */
    public final TableField<AccessMappingsRecord, AccessType> ACCESS_TYPE = createField(DSL.name("access_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(AccessType.class), this, "");

    /**
     * The column <code>public.access_mappings.created_at</code>.
     */
    public final TableField<AccessMappingsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.access_mappings.updated_at</code>.
     */
    public final TableField<AccessMappingsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private AccessMappings(Name alias, Table<AccessMappingsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AccessMappings(Name alias, Table<AccessMappingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.access_mappings</code> table reference
     */
    public AccessMappings(String alias) {
        this(DSL.name(alias), ACCESS_MAPPINGS);
    }

    /**
     * Create an aliased <code>public.access_mappings</code> table reference
     */
    public AccessMappings(Name alias) {
        this(alias, ACCESS_MAPPINGS);
    }

    /**
     * Create a <code>public.access_mappings</code> table reference
     */
    public AccessMappings() {
        this(DSL.name("access_mappings"), null);
    }

    public <O extends Record> AccessMappings(Table<O> path, ForeignKey<O, AccessMappingsRecord> childPath, InverseForeignKey<O, AccessMappingsRecord> parentPath) {
        super(path, childPath, parentPath, ACCESS_MAPPINGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AccessMappingsPath extends AccessMappings implements Path<AccessMappingsRecord> {
        public <O extends Record> AccessMappingsPath(Table<O> path, ForeignKey<O, AccessMappingsRecord> childPath, InverseForeignKey<O, AccessMappingsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AccessMappingsPath(Name alias, Table<AccessMappingsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AccessMappingsPath as(String alias) {
            return new AccessMappingsPath(DSL.name(alias), this);
        }

        @Override
        public AccessMappingsPath as(Name alias) {
            return new AccessMappingsPath(alias, this);
        }

        @Override
        public AccessMappingsPath as(Table<?> alias) {
            return new AccessMappingsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ACCESS_MAPPINGS_SHEET_ID, Indexes.IDX_ACCESS_MAPPINGS_USER_ID);
    }

    @Override
    public Identity<AccessMappingsRecord, Long> getIdentity() {
        return (Identity<AccessMappingsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccessMappingsRecord> getPrimaryKey() {
        return Keys.ACCESS_MAPPINGS_PKEY;
    }

    @Override
    public List<UniqueKey<AccessMappingsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACCESS_MAPPINGS_SHEET_ID_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<AccessMappingsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_MAPPINGS__ACCESS_MAPPINGS_SHEET_ID_FKEY);
    }

    private transient SheetsPath _sheets;

    /**
     * Get the implicit join path to the <code>public.sheets</code> table.
     */
    public SheetsPath sheets() {
        if (_sheets == null)
            _sheets = new SheetsPath(this, Keys.ACCESS_MAPPINGS__ACCESS_MAPPINGS_SHEET_ID_FKEY, null);

        return _sheets;
    }

    @Override
    public TableField<AccessMappingsRecord, OffsetDateTime> getRecordTimestamp() {
        return CREATED_AT;
    }

    @Override
    public AccessMappings as(String alias) {
        return new AccessMappings(DSL.name(alias), this);
    }

    @Override
    public AccessMappings as(Name alias) {
        return new AccessMappings(alias, this);
    }

    @Override
    public AccessMappings as(Table<?> alias) {
        return new AccessMappings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessMappings rename(String name) {
        return new AccessMappings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessMappings rename(Name name) {
        return new AccessMappings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessMappings rename(Table<?> name) {
        return new AccessMappings(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccessMappings where(Condition condition) {
        return new AccessMappings(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccessMappings where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccessMappings where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccessMappings where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccessMappings where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccessMappings where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccessMappings where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccessMappings where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccessMappings whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccessMappings whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, AccessType, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super AccessType, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super AccessType, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
